
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddCustomerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddCastingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddFilingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddSettingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddBuffingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddSupplierItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  address: 'address'
};

exports.Prisma.AddPurchaseStockScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  item: 'item',
  goldWeight: 'goldWeight',
  goldTouch: 'goldTouch',
  goldPurity: 'goldPurity',
  goldRate: 'goldRate',
  goldtotalValue: 'goldtotalValue',
  silverWeight: 'silverWeight',
  silverTouch: 'silverTouch',
  silverPurity: 'silverPurity',
  silverRate: 'silverRate',
  silvertotalValue: 'silvertotalValue'
};

exports.Prisma.CustomerTransactionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  date: 'date',
  value: 'value',
  type: 'type',
  touch: 'touch',
  purity: 'purity',
  goldRate: 'goldRate',
  customerId: 'customerId'
};

exports.Prisma.AddItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name'
};

exports.Prisma.AddTouchScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  touch: 'touch'
};

exports.Prisma.CastingEntryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  date: 'date',
  given_gold: 'given_gold',
  touch_id: 'touch_id',
  purity: 'purity',
  final_touch: 'final_touch',
  pure_value: 'pure_value',
  copper: 'copper',
  final_weight: 'final_weight',
  casting_customer_id: 'casting_customer_id'
};

exports.Prisma.CastingItemsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  item_id: 'item_id',
  weight: 'weight',
  touch_id: 'touch_id',
  item_purity: 'item_purity',
  remarks: 'remarks',
  casting_entry_id: 'casting_entry_id',
  casting_customer_id: 'casting_customer_id'
};

exports.Prisma.CastiingTotalBalanceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  total_item_weight: 'total_item_weight',
  current_balance_weight: 'current_balance_weight',
  total_scrap_weight: 'total_scrap_weight',
  total_wastage: 'total_wastage',
  item_entry: 'item_entry'
};

exports.Prisma.LotInfoScalarFieldEnum = {
  id: 'id',
  lotNumber: 'lotNumber',
  filing_customer_id: 'filing_customer_id',
  setting_customer_id: 'setting_customer_id',
  buffing_customer_id: 'buffing_customer_id',
  IsActive: 'IsActive'
};

exports.Prisma.FilingEntryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  filing_person_id: 'filing_person_id',
  casting_item_id: 'casting_item_id'
};

exports.Prisma.LotFilingMapperScalarFieldEnum = {
  id: 'id',
  filing_id: 'filing_id',
  lot_id: 'lot_id',
  item_id: 'item_id',
  filing_entry_id: 'filing_entry_id'
};

exports.Prisma.FilingItemsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  filing_entry_id: 'filing_entry_id',
  type: 'type',
  filing_item_id: 'filing_item_id',
  weight: 'weight',
  touch_id: 'touch_id',
  item_purity: 'item_purity',
  remarks: 'remarks',
  stone_option: 'stone_option',
  lot_filing_mapper_id: 'lot_filing_mapper_id'
};

exports.Prisma.FilingTotalBalanceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  after_weight: 'after_weight',
  total_product_weight: 'total_product_weight',
  current_balance_weight: 'current_balance_weight',
  total_scrap_weight: 'total_scrap_weight',
  wastage: 'wastage',
  balance: 'balance',
  filing_entry_id: 'filing_entry_id'
};

exports.Prisma.FilingWastageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  total_receipt: 'total_receipt',
  total_wastage: 'total_wastage',
  balance: 'balance',
  wastage_percentage: 'wastage_percentage',
  given_gold: 'given_gold',
  add_wastage: 'add_wastage',
  overall_wastage: 'overall_wastage',
  closing_balance: 'closing_balance',
  opening_balance: 'opening_balance',
  filing_person_id: 'filing_person_id',
  filing_lot_id: 'filing_lot_id'
};

exports.Prisma.SettingEntryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  setting_person_id: 'setting_person_id',
  casting_item_id: 'casting_item_id'
};

exports.Prisma.SettingItemsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  setting_item_id: 'setting_item_id',
  scrap_weight: 'scrap_weight',
  touch_id: 'touch_id',
  item_purity: 'item_purity',
  scrap_remarks: 'scrap_remarks',
  setting_entry_id: 'setting_entry_id'
};

exports.Prisma.LotSettingMapperScalarFieldEnum = {
  id: 'id',
  setting_id: 'setting_id',
  lot_id: 'lot_id',
  filing_item_id: 'filing_item_id',
  setting_entry_id: 'setting_entry_id'
};

exports.Prisma.SettingTotalBalanceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  receipt_weight: 'receipt_weight',
  stone_count: 'stone_count',
  stone_weight: 'stone_weight',
  remarks: 'remarks',
  wastage: 'wastage',
  total_product_weight: 'total_product_weight',
  current_balance_weight: 'current_balance_weight',
  total_scrap_weight: 'total_scrap_weight',
  balance: 'balance',
  setting_entry_id: 'setting_entry_id'
};

exports.Prisma.SettingWastageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  total_receipt: 'total_receipt',
  total_wastage: 'total_wastage',
  balance: 'balance',
  wastage_percentage: 'wastage_percentage',
  given_gold: 'given_gold',
  add_wastage: 'add_wastage',
  overall_wastage: 'overall_wastage',
  closing_balance: 'closing_balance',
  opening_balance: 'opening_balance',
  setting_entry_id: 'setting_entry_id'
};

exports.Prisma.BuffingEntryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  buffing_person_id: 'buffing_person_id',
  casting_item_id: 'casting_item_id'
};

exports.Prisma.BuffingItemsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  buffing_item_id: 'buffing_item_id',
  scrap_weight: 'scrap_weight',
  touch_id: 'touch_id',
  item_purity: 'item_purity',
  scrap_remarks: 'scrap_remarks',
  buffing_entry_id: 'buffing_entry_id'
};

exports.Prisma.BuffingTotalBalanceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  receipt_weight: 'receipt_weight',
  remarks: 'remarks',
  wastage: 'wastage',
  total_scrap_weight: 'total_scrap_weight',
  balance: 'balance',
  buffing_entry_id: 'buffing_entry_id'
};

exports.Prisma.LotBuffingMapperScalarFieldEnum = {
  id: 'id',
  buffing_id: 'buffing_id',
  lot_id: 'lot_id',
  setting_item_id: 'setting_item_id',
  filing_item_id: 'filing_item_id',
  buffing_entry_id: 'buffing_entry_id'
};

exports.Prisma.BuffingWastageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  total_receipt: 'total_receipt',
  total_wastage: 'total_wastage',
  balance: 'balance',
  wastage_percentage: 'wastage_percentage',
  given_gold: 'given_gold',
  add_wastage: 'add_wastage',
  overall_wastage: 'overall_wastage',
  closing_balance: 'closing_balance',
  opening_balance: 'opening_balance',
  buffing_person_id: 'buffing_person_id',
  buffing_lot_id: 'buffing_lot_id'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  casting_item_id: 'casting_item_id',
  filing_item_id: 'filing_item_id',
  setting_item_id: 'setting_item_id',
  buffing_item_id: 'buffing_item_id',
  item_id: 'item_id',
  weight: 'weight',
  touch_id: 'touch_id',
  item_purity: 'item_purity',
  remarks: 'remarks',
  casting_customer_id: 'casting_customer_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AddCustomerOrderByRelevanceFieldEnum = {
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddCastingOrderByRelevanceFieldEnum = {
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddFilingOrderByRelevanceFieldEnum = {
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddSettingOrderByRelevanceFieldEnum = {
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddBuffingOrderByRelevanceFieldEnum = {
  name: 'name',
  phoneNumber: 'phoneNumber',
  address: 'address',
  email: 'email'
};

exports.Prisma.AddSupplierItemOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  address: 'address'
};

exports.Prisma.AddPurchaseStockOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.CustomerTransactionOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.AddItemOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.CastingItemsOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.FilingItemsOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.SettingItemsOrderByRelevanceFieldEnum = {
  scrap_remarks: 'scrap_remarks'
};

exports.Prisma.SettingTotalBalanceOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.BuffingItemsOrderByRelevanceFieldEnum = {
  scrap_remarks: 'scrap_remarks'
};

exports.Prisma.BuffingTotalBalanceOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.StockOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};
exports.ITEMTYPE = exports.$Enums.ITEMTYPE = {
  Gold: 'Gold',
  Silver: 'Silver'
};

exports.CASTINGENTRYTYPE = exports.$Enums.CASTINGENTRYTYPE = {
  Items: 'Items',
  ScrapItems: 'ScrapItems'
};

exports.STONEOPTION = exports.$Enums.STONEOPTION = {
  WithStone: 'WithStone',
  WithoutStone: 'WithoutStone'
};

exports.Prisma.ModelName = {
  AddCustomer: 'AddCustomer',
  AddCasting: 'AddCasting',
  AddFiling: 'AddFiling',
  AddSetting: 'AddSetting',
  AddBuffing: 'AddBuffing',
  AddSupplierItem: 'AddSupplierItem',
  AddPurchaseStock: 'AddPurchaseStock',
  CustomerTransaction: 'CustomerTransaction',
  AddItem: 'AddItem',
  AddTouch: 'AddTouch',
  CastingEntry: 'CastingEntry',
  CastingItems: 'CastingItems',
  CastiingTotalBalance: 'CastiingTotalBalance',
  LotInfo: 'LotInfo',
  FilingEntry: 'FilingEntry',
  LotFilingMapper: 'LotFilingMapper',
  FilingItems: 'FilingItems',
  FilingTotalBalance: 'FilingTotalBalance',
  FilingWastage: 'FilingWastage',
  SettingEntry: 'SettingEntry',
  SettingItems: 'SettingItems',
  LotSettingMapper: 'LotSettingMapper',
  SettingTotalBalance: 'SettingTotalBalance',
  SettingWastage: 'SettingWastage',
  BuffingEntry: 'BuffingEntry',
  BuffingItems: 'BuffingItems',
  BuffingTotalBalance: 'BuffingTotalBalance',
  LotBuffingMapper: 'LotBuffingMapper',
  BuffingWastage: 'BuffingWastage',
  Stock: 'Stock'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
