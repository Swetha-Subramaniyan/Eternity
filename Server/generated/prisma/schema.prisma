// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ITEMTYPE {
  Gold
  Silver
}

enum CASTINGENTRYTYPE {
  Items
  ScrapItems
}

enum STONEOPTION {
  WithStone
  WithoutStone
}

model AddCustomer {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now())
  name         String
  phoneNumber  String?
  address      String?
  email        String?
  transactions CustomerTransaction[]
}

model AddCasting {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  name         String
  phoneNumber  String?
  address      String?
  email        String?
  entries      CastingEntry[]
  castingitems CastingItems[]
  stock        Stock[]
}

model AddFiling {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  name        String
  phoneNumber String?
  address     String?
  email       String?
  filings     FilingEntry[]
}

model AddSetting {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  name        String
  phoneNumber String?
  address     String?
  email       String?
  settings    SettingEntry[]
}

model AddBuffing {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  name        String
  phoneNumber String?
  address     String?
  email       String?
  buffings    BuffingEntry[]
}

model AddSupplierItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  email       String?
  phoneNumber String?
  address     String?
}

model AddPurchaseStock {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  name             String
  item             ITEMTYPE
  goldWeight       Int?
  goldTouch        Float?
  goldPurity       Float?
  goldRate         Float?
  goldtotalValue   Float?
  silverWeight     Int?
  silverTouch      Float?
  silverPurity     Float?
  silverRate       Float?
  silvertotalValue Float?
}

model CustomerTransaction {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  date       DateTime
  value      Float
  type       String
  touch      Float?
  purity     Float?
  goldRate   Float?
  customer   AddCustomer @relation(fields: [customerId], references: [id])
  customerId Int
}

model AddItem {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  name          String
  casting_items CastingItems[]
  stock         Stock[]
  filing_items  FilingItems[]
  setting_items SettingItems[]
  buffing_items BuffingItems[]
}

model AddTouch {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  touch         Float
  casting_entry CastingEntry[]
  casting_items CastingItems[]
  filing_items  FilingItems[]
  setting_items SettingItems[]
  buffing_items BuffingItems[]
  stock         Stock[]
}

model CastingEntry {
  id                  Int            @id @default(autoincrement())
  createdAt           DateTime       @default(now())
  date                DateTime
  given_gold          Float
  touch_id            Int
  touch               AddTouch       @relation(fields: [touch_id], references: [id])
  purity              Float
  final_touch         Float
  pure_value          Float
  copper              Float
  final_weight        Float
  casting_customer_id Int
  casting_customer    AddCasting     @relation(fields: [casting_customer_id], references: [id])
  items               CastingItems[]
}

model CastingItems {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  type          CASTINGENTRYTYPE
  item_id       Int
  weight        Float
  touch_id      Int
  touch         AddTouch         @relation(fields: [touch_id], references: [id])
  item_purity   Float
  remarks       String?
  after_weight  Float?
  scrap_weight  Float?
  scrap_wastage Float?

  item             AddItem       @relation(fields: [item_id], references: [id])
  castingEntry     CastingEntry  @relation(fields: [casting_entry_id], references: [id], onDelete: Cascade)
  casting_entry_id Int
  filingEntry      FilingEntry[]
  settingEntry     SettingEntry?
  buffingEntry     BuffingEntry?
  stock            Stock[]

  casting_customer_id Int
  casting_customer    AddCasting @relation(fields: [casting_customer_id], references: [id])
}

model FilingEntry {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  filing_person    AddFiling     @relation(fields: [filing_person_id], references: [id])
  filing_person_id Int
  castingItem      CastingItems  @relation(fields: [casting_item_id], references: [id])
  casting_item_id  Int
  filingItems      FilingItems[]
}

model FilingItems {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  filing_entry_id Int
  filing_entry    FilingEntry @relation(fields: [filing_entry_id], references: [id], onDelete: Cascade)

  type           CASTINGENTRYTYPE
  item_id        Int
  item           AddItem          @relation(fields: [item_id], references: [id])
  weight         Float
  touch_id       Int
  touch          AddTouch         @relation(fields: [touch_id], references: [id])
  item_purity    Float
  remarks        String?
  wastage        Boolean?
  stone_option   STONEOPTION?
  after_weight   Float?
  scrap_weight   Float?
  scrap_wastage  Float?
  stock          Stock[]
  setting_entry  SettingEntry[]
  buffing_entry  BuffingEntry[]
  filing_wastage FilingWastage[]
}

model FilingWastage {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  wastage_percentage Int
  given_gold         Int?
  add_wastage        Float?
  filing_items       FilingItems[]
}

model SettingEntry {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  setting_person    AddSetting    @relation(fields: [setting_person_id], references: [id])
  setting_person_id Int
  castingItem       CastingItems  @relation(fields: [casting_item_id], references: [id])
  casting_item_id   Int           @unique
  filingItems       FilingItems[]
}

model SettingItems {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  receipt_weight Float
  stone_count    Float
  stone_weight   Float
  remarks        String?
  wastage        Boolean

  type            CASTINGENTRYTYPE
  item_id         Int
  item            AddItem          @relation(fields: [item_id], references: [id])
  scrap_weight    Float
  touch_id        Int
  touch           AddTouch         @relation(fields: [touch_id], references: [id])
  item_purity     Float
  scrap_remarks   String?
  setting_wastage SettingWastage[]

  buffing_entry BuffingEntry[]
  stock         Stock[]
}

model SettingWastage {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  wastage_percentage Int
  given_gold         Int?
  add_wastage        Float?
  setting_items      SettingItems[]
}

model BuffingEntry {
  id                Int          @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  buffing_person    AddBuffing   @relation(fields: [buffing_person_id], references: [id])
  buffing_person_id Int
  castingItem       CastingItems @relation(fields: [casting_item_id], references: [id])
  casting_item_id   Int          @unique

  filing_items  FilingItems[]
  setting_items SettingItems[]
}

model BuffingItems {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  receipt_weight Float
  remarks        String
  wastage        Boolean

  type            CASTINGENTRYTYPE
  item_id         Int
  item            AddItem          @relation(fields: [item_id], references: [id])
  scrap_weight    Float
  touch_id        Int
  touch           AddTouch         @relation(fields: [touch_id], references: [id])
  item_purity     Float
  scrap_remarks   String
  stock           Stock[]
  buffing_wastage BuffingWastage[]
}

model BuffingWastage {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  wastage_percentage Int
  given_gold         Int?
  add_wastage        Float?
  buffing_items      BuffingItems[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  casting_item_id Int?
  castingItem     CastingItems? @relation(fields: [casting_item_id], references: [id], onDelete: Cascade)

  filing_item_id Int?
  filingItem     FilingItems? @relation(fields: [filing_item_id], references: [id], onDelete: Cascade)

  setting_item_id Int?
  settingItem     SettingItems? @relation(fields: [setting_item_id], references: [id], onDelete: Cascade)

  buffing_item_id Int?
  buffingItem     BuffingItems? @relation(fields: [buffing_item_id], references: [id], onDelete: Cascade)

  item_id       Int
  item          AddItem  @relation(fields: [item_id], references: [id])
  weight        Float
  touch_id      Int
  touch         AddTouch @relation(fields: [touch_id], references: [id])
  item_purity   Float
  remarks       String?
  scrap_wastage Float?

  casting_customer_id Int
  casting_customer    AddCasting @relation(fields: [casting_customer_id], references: [id])
}
